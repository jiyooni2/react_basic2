Styled Component
    dark mode, light mode 이런거 쉬움
    전역으로 import css하면, application 전체에 적용

    class 자동으로 설정

    const Father = styled.div`
      display: flex;(CSS code)
    `;

      and use <Father></Father>

    구현 부분에는 style을 따로 적지 않음

    props사용 가능
    
extending(상속)
    const Circle = styled(Box)`
    border-radius:50%;
    `   
        Box의 style 복붙하는거랑 같은 효과

As
    const Btn = styled.button`
    color: white;
    `;
    
    똑같은 style 갖는 a tag를 갖고 싶을 때,
    <Btn as="a"></Btn>

attrs    
    const Input = styled.input.attrs({required:true})`
    background-color: tomato;
    `;
    
    앞으로 생성될 모든 Input component에 attrs를 붙여줌
    
selector in styled component
    styled component 안에서 targeting 가능
        span{css}
        
        span{
            &:hover{

            } = span:hover{}
        }

        <Component>
        Emoji{

        }
    

Theme
    import { ThemeProvider } from "styled-components";
    <ThemeProvider theme={theme}>
        <App/>
    </ThemeProvider>
    
    App에서 ThemeProvider의 props에 접근 가능


TypeScript
    JS + type
    JS : type 신경도 안씀
        연산이 생각처럼 안될때도 있고, type보장이 안됨
    프로그램이 작동하기 전에 TS가 실수를 알려줄 것

    const plus = (a:number,b:number) => a + b;
    plus(4,2);
    plus("4",2); 하면, error

    Browser -> JS engine만 있고 TS engine은 없음, 이해 못함
    사용자게게 publish 할때 TS가 compile해서 JS로 바꿔줌
    별 문제가 없는게 확인되면 평범한 JS 코드를 return
    
Adding TS to create-react-app
    npx create-react-app my-app --template typescript

    typescript : .ts
    typescript+react : .tsx

Packages, Libraries -> made by JS
    TS : 코드 실행 전에 오류로 알려줌
        npm install --save-dev @types/styled-components

        @type : TS가 styled-component 해석할 수 있게 해줌
        Typescript Definition

How to type Component?
    component가 필요로 하는 prop을 넘겨주지 않으면 에러가 남
        for protection
    
    PropTypes : 코드를 실행한 후에 확인 가능
    TS : 코드 실행 전에 알고 오류를 수정

    interface : TS에게 object shape 알려줌

    interface CircleProps {
        bgColor: string;
        }

    function Circle({ bgColor }: CircleProps) {
        return <Container />;
    }


    interface PlayerShape{
        name:string;
        age:string;
    }

    const sayHello = (playerObj:PlayerShape)=>{
        console.log(playerObj.age,playerObj.name);
    }

    optional props(using ?)

    default props(using ??)


TS + React State
    change the state => refresh your component

    const [counter, setCounter] = useState(1);
    counter:number로 type.
    만약 setCounter에서 string을 넘기면, error
    
    string 이거나 number가 되도록 하고싶다면
        const [value, setValue] = useState<number|string>(1);
    
    
any Type
    any Type이 되는 걸 최대한 지양해야함
    TS에게 type을 설명하려고 최대한 노력

    const onChange = (event: React.FormEvent<HTMLInputElement>) =>{};

    onChange 함수가 HTMLInputElement에 의해서 실행될 것이라는 걸 알 수 있음
    이벤트는 form으로 부터오고, HTMLInputElement가 이 이벤트를 발생시킴

declaration file(library.d.ts)
    이전에 설치해놓은 파일을 override
    styled components의 테마 정의를 확장
    안에 보면 알겠지만 단순히 인터페이스를 모아서 정의해놓은 것

React RouterDOM
    어플리케이션에 URL을 가질 수 있도록 해줄 것

        
useParmas()
    사용할때도, interface 등록해줘야함
    URL에 어떤 파라미터도 없다고 생각

Reset CSS
    https://github.com/zacanger/styled-reset/blob/master/src/index.ts

Google Fonts
    https://fonts.google.com

Source Sans Pro 폰트
    @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');
    font-family: 'Source Sans Pro', sans-serif;

Flat UI Color
    https://flatuicolors.com/palette/gb

How to apply to whole document
    createGlobalStyle

Each component only return 1 component
    <Fragment> tag로 감싸서 리턴하면 됨
    코드상에 보이지 않음

props
    부모꺼 상속받음

Link Vs a
    a : refresh the whole page
    link : not trigger a full page refresh, 바뀌는 부분만

React Router Link -> 나중에는 anchor로 바뀌기는 함
    anchor css설정하면 바뀜

padding vs margin
    padding : inside the object
    margin : outside the object

화면 바꿀때,(다른 URL로 이동할 때) state 사라짐
    홈으로 돌아올때마다 다시 fetch

using Link Component, can send the screen, information
    최대한 정보를 중복해서 보내지 않는게 좋음
    sending the state
        <Link to={{ pathname: `/${coin.id}`, state: { name: coin.name } }}/>

    const { state } = useLocation<RouteState>();
        useLocation()을 사용해서, 이동한 페이지에서 state에 접근

    state가 생성되는건, 홈에서 클릭할 때 생성되는 거니까, 직접 URL을 통해 접근하려 하면 error
        
?.
    priceInfo?.max_supply
        priceInfo가 undefined이 아닌 경우에만 max_supply 요구, 없어도 오류x

Link component를 이용해서, URL을 바꿔서 바뀌는 부분만 trigger rerender

userRouteMatch
    특정 URL에 있는지 여부를 알려줌

React Query
https://tkdodo.eu/blog/react-query-render-optimizations
    import { QueryClient, QueryClientProvider } from "react-query";
    const queryClient = new QueryClient();

    <QueryClientProvider client={queryClient}>
        </>
    </QueryClientProvider>
    

    const [coins, setCoins] = useState<CoinInterface[]>([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    fetch("https://api.coinpaprika.com/v1/coins")
      .then((response) => response.json())
      .then((json) => setCoins(json.slice(0, 100)))
      .then(() => setLoading(false));
  }, []);

  hide all these codes


    1.fetcher function
        should return promise
    2.const { isLoading, data } = useQuery("queryKey", fetcher);
        fetcher function 끝나면 data에 넣어주고, 연산중이라면 isLoading=true
        queryKey : query를 고유하게 구별해주는 키
        3번째 param : option
        refetchInterval를 설정하면, 자동으로 일정시간 지나면 refetch
        백그라운드에서 refetch, UI update(바뀐부분만)

    react query는 데이터를 캐쉬에 저장함
        계속 fetch 다시 하는 걸 막아줌, 서버비용 줄임

    import {ReactQueryDevtools} from "react-query-devtools"
        캐시에 있는 것 볼 수 있음    

    const { isLoading:infoLoading, data:info } = useQuery<InfoData>(["info", coinId], () =>
        fetchCoinInfo(coinId)
    );
        이름 수정할때 이렇게 해야함

useParams 무작정 사용하기보다는 이미 있다면, props를 통해 보내주기

Chart
    ApexChart.js
    npm install react-apexcharts apexcharts
    documentation 보면서 customize